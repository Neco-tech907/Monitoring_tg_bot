import os
from io import BytesIO
import re
import logging
from telegram import Update
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext, ConversationHandler
from dotenv import load_dotenv
import paramiko
import psycopg2
from psycopg2 import Error

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("TOKEN")
RM_HOST = os.getenv("RM_HOST")
RM_USER = os.getenv("RM_USER")
RM_PASSWORD = os.getenv("RM_PASSWORD")
DB_USER = os.getenv("DB_USER")
DB_PASSWORD = os.getenv("DB_PASSWORD")
DB_HOST = os.getenv("DB_HOST")
DB_PORT = os.getenv("DB_PORT")
DB_DATABASE = os.getenv("DB_DATABASE")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def db_connect():
    try:
        connection = psycopg2.connect(
            user=DB_USER,
            password=DB_PASSWORD,
            host=DB_HOST,
            port=DB_PORT,
            database=DB_DATABASE
        )
	 # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
        cursor = connection.cursor()
        cursor.execute("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'emails')")
        emails_table_exists = cursor.fetchone()[0]
        cursor.execute("SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'phone_numbers')")
        phones_table_exists = cursor.fetchone()[0]
        cursor.close()
        
        if not emails_table_exists or not phones_table_exists:
            raise Exception("–û–¥–Ω–∞ –∏–ª–∏ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã (emails, phone_numbers) –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
        logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö %s —É—Å–ø–µ—à–Ω–æ", DB_DATABASE)
        return connection
    except Error as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %s", str(e))
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = logging.FileHandler("monitoring_bot.log", encoding="utf-8")
logging.basicConfig(handlers=[handler], level=logging.INFO)
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞
TOKEN = os.getenv("TOKEN")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler
FIND_EMAIL, FIND_PHONE, VERIFY_PASSWORD, SAVE_EMAIL, SAVE_PHONE = range(5)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
def start(update: Update, context: CallbackContext):
    update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.")
    logging.info("üöÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /start", update.effective_user.username)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_email
def handle_find_email(update: Update, context: CallbackContext):
    update.message.reply_text("üìß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤:")
    logging.info("üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /find_email", update.effective_user.username)
    return FIND_EMAIL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ email
def find_email(update: Update, context: CallbackContext):
    text = update.message.text
    logging.info("üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ email: %s", update.effective_user.username, text)
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ email
    email_pattern = r'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}'
    emails = re.findall(email_pattern, text)

    if not emails:
        update.message.reply_text("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ.")
        logging.info("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ email –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['emails'] = emails
    output = "\n".join(emails)
    update.message.reply_text(f"üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n{output}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? –û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    logging.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d email-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", len(emails), update.effective_user.username)
    return SAVE_EMAIL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ email
def save_email(update: Update, context: CallbackContext):
    response = update.message.text.lower()
    username = update.effective_user.username
    emails = context.user_data.get('emails', [])

    if response == '–¥–∞':
        try:
            connection = db_connect()
            cursor = connection.cursor()
            inserted_count = 0
            for email in emails:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email –≤ –±–∞–∑–µ
                cursor.execute("SELECT email FROM emails WHERE email = %s", (email,))
                if not cursor.fetchone():
                    cursor.execute("INSERT INTO emails (email) VALUES (%s)", (email,))
                    inserted_count += 1
            connection.commit()
            cursor.close()
            connection.close()
            if inserted_count > 0:
                update.message.reply_text(f"‚úÖ {inserted_count} email-–∞–¥—Ä–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø–∏—Å–∞–ª %d email-–∞–¥—Ä–µ—Å–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", username, inserted_count)
            else:
                update.message.reply_text("‚ÑπÔ∏è –í—Å–µ email-–∞–¥—Ä–µ—Å–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                logging.info("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: –≤—Å–µ email-–∞–¥—Ä–µ—Å–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", username)
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ email-–∞–¥—Ä–µ—Å–æ–≤: {str(e)}")
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ email-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", username, str(e))
    elif response == '–Ω–µ—Ç':
        update.message.reply_text("üö´ –ó–∞–ø–∏—Å—å email-–∞–¥—Ä–µ—Å–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logging.info("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–ø–∏—Å–∏ email-–∞–¥—Ä–µ—Å–æ–≤", username)
    else:
        update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return SAVE_EMAIL

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    context.user_data.clear()
    return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /find_phone_number
def handle_find_phone_number(update: Update, context: CallbackContext):
    update.message.reply_text("üìû –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:")
    logging.info("üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /find_phone_number", update.effective_user.username)
    return FIND_PHONE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
def find_phone_number(update: Update, context: CallbackContext):
    text = update.message.text
    logging.info("üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: %s", update.effective_user.username, text)
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
    phone_pattern = r'(\+?\d{1,2}\s?\d{3}\s?\d{3}\s?\d{2}\s?\d{2}|\d{3}\s?\d{3}\s?\d{2}\s?\d{2}|\d{10})'
    phones = re.findall(phone_pattern, text)

    if not phones:
        update.message.reply_text("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—Å—Ç–µ.")
        logging.info("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['phones'] = phones
    output = "\n".join(phones)
    update.message.reply_text(f"üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{output}\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö? –û—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
    logging.info("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", len(phones), update.effective_user.username)
    return SAVE_PHONE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
def save_phone(update: Update, context: CallbackContext):
    response = update.message.text.lower()
    username = update.effective_user.username
    phones = context.user_data.get('phones', [])

    if response == '–¥–∞':
        try:
            connection = db_connect()
            cursor = connection.cursor()
            inserted_count = 0
            for phone in phones:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±–∞–∑–µ
                cursor.execute("SELECT phone_number FROM phone_numbers WHERE phone_number = %s", (phone,))
                if not cursor.fetchone():
                    cursor.execute("INSERT INTO phone_numbers (phone_number) VALUES (%s)", (phone,))
                    inserted_count += 1
            connection.commit()
            cursor.close()
            connection.close()
            if inserted_count > 0:
                update.message.reply_text(f"‚úÖ {inserted_count} –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                logging.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–ø–∏—Å–∞–ª %d –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", username, inserted_count)
            else:
                update.message.reply_text("‚ÑπÔ∏è –í—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                logging.info("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s: –≤—Å–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç", username)
        except Exception as e:
            update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {str(e)}")
            logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %s", username, str(e))
    elif response == '–Ω–µ—Ç':
        update.message.reply_text("üö´ –ó–∞–ø–∏—Å—å –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        logging.info("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –∑–∞–ø–∏—Å–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤", username)
    else:
        update.message.reply_text("‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return SAVE_PHONE

    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    context.user_data.clear()
    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏–∏ get_emails –∏ get_phone_numbers
def get_emails(update: Update, context: CallbackContext):
    logging.info("üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_emails", update.effective_user.username)
    
    try:
        connection = db_connect()
        cursor = connection.cursor()
        cursor.execute("SELECT id, email FROM emails")
        emails = cursor.fetchall()
        cursor.close()
        connection.close()

        if not emails:
            update.message.reply_text("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logging.info("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
            return

        email_list = [f"{email[0]}: {email[1]}" for email in emails]
        output = "\n".join(email_list)

        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="emails.txt")
            logging.info("‚úÖ Email-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        else:
            update.message.reply_text(f"üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n{output}")
            logging.info("‚úÖ Email-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email-–∞–¥—Ä–µ—Å–æ–≤: %s", str(e))
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

def get_phone_numbers(update: Update, context: CallbackContext):
    logging.info("üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_phone_numbers", update.effective_user.username)
    
    try:
        connection = db_connect()
        cursor = connection.cursor()
        cursor.execute("SELECT id, phone_number FROM phone_numbers")
        phones = cursor.fetchall()
        cursor.close()
        connection.close()

        if not phones:
            update.message.reply_text("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logging.info("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
            return

        phone_list = [f"{phone[0]}: {phone[1]}" for phone in phones]
        output = "\n".join(phone_list)

        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="phone_numbers.txt")
            logging.info("‚úÖ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        else:
            update.message.reply_text(f"üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{output}")
            logging.info("‚úÖ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: %s", str(e))
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
def verify_password(update: Update, context: CallbackContext):
    password = update.message.text  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–∞—Ä–æ–ª—å –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å", update.effective_user.username)
    
    if re.search(r'^(?=.*[A-Z])(?=.*[a-z])(?=.*\d)(?=.*[!@#$%^&*()_+])[A-Za-z\d!@#$%^&*()_+]{8,}$', password):
        update.message.reply_text("–ü–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—Å–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!")
    else:
        update.message.reply_text("–ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –≤–∫–ª—é—á–∞—è –∑–∞–≥–ª–∞–≤–Ω—ã–µ –∏ —Å—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.")
    return ConversationHandler.END

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SSH-–∫–ª–∏–µ–Ω—Ç–∞
def ssh_connect():
    logging.info("–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å %s –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", RM_HOST, RM_USER)
    ssh = paramiko.SSHClient()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(RM_HOST, username=RM_USER, password=RM_PASSWORD)
    return ssh

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ª–∏–∑–µ
def get_release(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_release", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("lsb_release -a")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
def get_uptime(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_uptime", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("uptime")
    output = stdout.read().decode()
    update.message.reply_text(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–∏—Å–∫–æ–≤
def get_df(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_df", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("df -h")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ
def get_uname(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_uname", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("uname -a")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
def get_free(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_free", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("free -h")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
def get_mpstat(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_mpstat", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("mpstat")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
def get_ps(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_ps", update.effective_user.username)
    
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("ps aux")
    output = stdout.read().decode()
    ssh.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if len(output) > 4000:
        file = BytesIO()
        file.write(output.encode())
        file.seek(0)
        update.message.reply_document(document=file, filename="ps_output.txt")
    else:
        update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:\n{output}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
def get_w(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_w", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("w")
    output = stdout.read().decode()
    update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É)
def get_auths(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_auths", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("last -n 10")
    output = stdout.read().decode()
    update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ö–æ–¥–æ–≤:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
def get_critical(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_critical", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("journalctl -p 3 -n 5")
    output = stdout.read().decode()
    update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö
def get_ss(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_ss", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("ss -tuln")
    output = stdout.read().decode()
    update.message.reply_text(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö
def get_apt_list(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_apt_list", update.effective_user.username)
    
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("apt list --installed")
    output = stdout.read().decode()
    ssh.close()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞
    if len(output) > 4000:
        file = BytesIO()
        file.write(output.encode())
        file.seek(0)
        update.message.reply_document(document=file, filename="apt_list.txt")
    else:
        update.message.reply_text(f"–°–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:\n{output}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
def get_services(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_services", update.effective_user.username)
    ssh = ssh_connect()
    stdin, stdout, stderr = ssh.exec_command("systemctl list-units --type=service --state=running")
    output = stdout.read().decode()
    update.message.reply_text(f"–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:\n{output}")
    ssh.close()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
def disconnect_ssh(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s —Ä–∞–∑–æ—Ä–≤–∞–ª SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ", update.effective_user.username)
    update.message.reply_text("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.")
    return ConversationHandler.END


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def start(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ /start", update.effective_user.username)
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /find_email, /find_phone_number –∏–ª–∏ /verify_password.")
    return ConversationHandler.END

def handle_find_email(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ email-–∞–¥—Ä–µ—Å–æ–≤:")
    return FIND_EMAIL

def handle_find_phone_number(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:")
    return FIND_PHONE

def handle_verify_password(update: Update, context: CallbackContext):
    update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
    return VERIFY_PASSWORD






# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
def get_repl_logs(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_repl_logs", update.effective_user.username)
    
    try:
        ssh = ssh_connect()
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ PostgreSQL –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π
        command = "grep -i 'replication\\|wal\\|streaming' /var/log/postgresql/postgresql.log | tail -n 50"
        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode()
        error = stderr.read().decode()
        ssh.close()

        if error:
            update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {error}")
            return

        if not output:
            update.message.reply_text("–õ–æ–≥–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞
        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="replication_logs.txt")
        else:
            update.message.reply_text(f"–õ–æ–≥–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):\n{output}")

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: %s", str(e))
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
#-------------------------------------------------------------------


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è email-–∞–¥—Ä–µ—Å–æ–≤
def get_emails(update: Update, context: CallbackContext):
    logging.info("üìß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_emails", update.effective_user.username)
    
    try:
        connection = db_connect()
        cursor = connection.cursor()
        # –í—ã–±–∏—Ä–∞–µ–º id –∏ email –∏–∑ —Ç–∞–±–ª–∏—Ü—ã emails
        cursor.execute("SELECT id, email FROM emails")
        emails = cursor.fetchall()
        cursor.close()
        connection.close()

        if not emails:
            update.message.reply_text("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logging.info("üì≠ Email-–∞–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ email-–∞–¥—Ä–µ—Å–æ–≤ —Å id
        email_list = [f"{email[0]}: {email[1]}" for email in emails]
        output = "\n".join(email_list)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞
        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="emails.txt")
            logging.info("‚úÖ Email-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        else:
            update.message.reply_text(f"üìß –ù–∞–π–¥–µ–Ω–Ω—ã–µ email-–∞–¥—Ä–µ—Å–∞:\n{output}")
            logging.info("‚úÖ Email-–∞–¥—Ä–µ—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ email-–∞–¥—Ä–µ—Å–æ–≤: %s", str(e))
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")



# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤
def get_phone_numbers(update: Update, context: CallbackContext):
    logging.info("üìû –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_phone_numbers", update.effective_user.username)
    
    try:
        connection = db_connect()
        cursor = connection.cursor()
        # –í—ã–±–∏—Ä–∞–µ–º id –∏ phone_number –∏–∑ —Ç–∞–±–ª–∏—Ü—ã phone_numbers
        cursor.execute("SELECT id, phone_number FROM phone_numbers")
        phones = cursor.fetchall()
        cursor.close()
        connection.close()

        if not phones:
            update.message.reply_text("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logging.info("üì≠ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å id
        phone_list = [f"{phone[0]}: {phone[1]}" for phone in phones]
        output = "\n".join(phone_list)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞
        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="phone_numbers.txt")
            logging.info("‚úÖ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)
        else:
            update.message.reply_text(f"üìû –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:\n{output}")
            logging.info("‚úÖ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", update.effective_user.username)

    except Exception as e:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: %s", str(e))
        update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")





# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
	    FIND_EMAIL: [MessageHandler(Filters.text & ~Filters.command, find_email)],
            FIND_PHONE: [MessageHandler(Filters.text & ~Filters.command, find_phone_number)],
            VERIFY_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, verify_password)],
            SAVE_EMAIL: [MessageHandler(Filters.text & ~Filters.command, save_email)],
            SAVE_PHONE: [MessageHandler(Filters.text & ~Filters.command, save_phone)],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(conversation_handler)
    dispatcher.add_handler(CommandHandler("get_release", get_release))
    dispatcher.add_handler(CommandHandler("get_uptime", get_uptime))
    dispatcher.add_handler(CommandHandler("get_df", get_df))

    updater.start_polling()
    updater.idle()

def set_bot_commands(updater):
    updater.bot.set_my_commands([
        ('start', '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'),
        ('find_email', '–ü–æ–∏—Å–∫ email-–∞–¥—Ä–µ—Å–æ–≤ üìß'),
        ('find_phone_number', '–ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ üìû'),
        ('verify_password', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç—å'),
        ('get_release', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ —Å–∏—Å—Ç–µ–º—ã'),
        ('get_uptime', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã'),
        ('get_df', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ'),
        ('get_uname', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ'),
        ('get_free', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏'),
        ('get_mpstat', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã'),
        ('get_ps', '–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤'),
        ('get_w', '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'),
        ('get_auths', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –≤—Ö–æ–¥–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É'),
        ('get_critical', '–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π'),
        ('get_ss', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–∞—Ö'),
        ('get_apt_list', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–∞—Ö'),
        ('get_services', '–ó–∞–ø—É—â–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã'),
        ('get_repl_logs', '–õ–æ–≥–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ PostgreSQL üìú'),
        ('get_emails', '–ü–æ–ª—É—á–∏—Ç—å email-–∞–¥—Ä–µ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìß'),
        ('get_phone_numbers', '–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö üìû'),
        ('disconnect_ssh', '–†–∞–∑—Ä—ã–≤ SSH-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'),
    ])


#---
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
def get_repl_logs(update: Update, context: CallbackContext):
    logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –≤—ã–∑–≤–∞–ª /get_repl_logs", update.effective_user.username)
    
    try:
        ssh = ssh_connect()
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤ PostgreSQL –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–µ–π
        command = "grep -i 'replication\\|wal\\|streaming' /var/log/postgresql/postgresql.log | tail -n 50"
        stdin, stdout, stderr = ssh.exec_command(command)
        output = stdout.read().decode()
        error = stderr.read().decode()
        ssh.close()

        if error:
            update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {error}")
            return

        if not output:
            update.message.reply_text("–õ–æ–≥–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –ø—É—Å—Ç—ã.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—ã–≤–æ–¥–∞
        if len(output) > 4000:
            file = BytesIO()
            file.write(output.encode())
            file.seek(0)
            update.message.reply_document(document=file, filename="replication_logs.txt")
        else:
            update.message.reply_text(f"–õ–æ–≥–∏ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å—Ç—Ä–æ–∫):\n{output}")

    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤ —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏: %s", str(e))
        update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

#---


def main():
    updater = Updater(TOKEN)
    dispatcher = updater.dispatcher

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    set_bot_commands(updater)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start), 
            CommandHandler('find_email', handle_find_email),
            CommandHandler('find_phone_number', handle_find_phone_number),
            CommandHandler('verify_password', handle_verify_password)
        ],
        states={
	    FIND_EMAIL: [MessageHandler(Filters.text & ~Filters.command, find_email)],
            FIND_PHONE: [MessageHandler(Filters.text & ~Filters.command, find_phone_number)],
            VERIFY_PASSWORD: [MessageHandler(Filters.text & ~Filters.command, verify_password)],
            SAVE_EMAIL: [MessageHandler(Filters.text & ~Filters.command, save_email)],
            SAVE_PHONE: [MessageHandler(Filters.text & ~Filters.command, save_phone)],
        },
        fallbacks=[CommandHandler('start', start)]
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dispatcher.add_handler(conversation_handler)
    dispatcher.add_handler(CommandHandler("get_release", get_release))
    dispatcher.add_handler(CommandHandler("get_uptime", get_uptime))
    dispatcher.add_handler(CommandHandler("get_df", get_df))
    dispatcher.add_handler(CommandHandler("get_uname", get_uname))
    dispatcher.add_handler(CommandHandler("get_free", get_free))
    dispatcher.add_handler(CommandHandler("get_mpstat", get_mpstat))
    dispatcher.add_handler(CommandHandler("get_ps", get_ps))
    dispatcher.add_handler(CommandHandler("get_w", get_w))
    dispatcher.add_handler(CommandHandler("get_auths", get_auths))
    dispatcher.add_handler(CommandHandler("get_critical", get_critical))
    dispatcher.add_handler(CommandHandler("get_ss", get_ss))
    dispatcher.add_handler(CommandHandler("get_apt_list", get_apt_list))
    dispatcher.add_handler(CommandHandler("get_services", get_services))
    dispatcher.add_handler(CommandHandler("get_repl_logs", get_repl_logs))
    dispatcher.add_handler(CommandHandler("get_emails", get_emails))
    dispatcher.add_handler(CommandHandler("get_phone_numbers", get_phone_numbers))
    dispatcher.add_handler(CommandHandler("disconnect_ssh", disconnect_ssh))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
